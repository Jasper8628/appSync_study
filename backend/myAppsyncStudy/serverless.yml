

service: myappsyncstudy
frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

  stackName: appsyncstudy
  apiName: appsyncstudy

  stage: dev
  region: ap-southeast-2

  apiGateway:
    metrics: true

  environment:
    REGION: ap-southeast-2
    # COGNITO_USER_POOL_ID: ap-southeast-2_pNT4oXppf
    # COGNITO_USER_POOL_CLIENT_ID: 37t4cmhhsufk0e44hqdivog2cf

    # DYNAMO_USER_PROFILE_TABLE: Dev-UserProfile
    # DYNAMO_VIDEO_TABLE: video-pipeline

    # VIDEO_UPLOAD_TEMPORARY_BUCKET: dev-video-upload-temp-bucket
    # VIDEO_THUMBNAIL_BUCKET: dev-video-thumbnail-bucket
    # VIDEO_PRODUCT_LINK_IMAGE_BUCKET: dev-video-product-link-image-bucket
    # VIDEO_PIPELINE_SOURCE_BUCKET: video-pipeline-source-6revag747q0x
    # VIDEO_PIPELINE_DESTINATION_BUCKET: video-pipeline-destination-ofjnsl6xbzb
    # PROFILE_IMAGES_BUCKET: stomble-profile-images

    # DEFAULT_PROFILE_IMAGES_AMOUNT: 5

  # Permissions
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - cognito-idp:AdminInitiateAuth
  #       - dynamodb:*
  #       - S3:*
  #       - cognito-idp:AdminCreateUser
  #     Resource: '*'

  # # Specify Stomble AWS credentials from ~/.aws/credentials
  # profile: stomble



functions:
  graphql:
    handler: handler.graphqlHandler

custom:
  accountId: abc
  appSync:
    # name:  # defaults to api
    authenticationType: API_KEY
    serviceRole: PublicAppSyncServiceRole
    # userPoolConfig:
    #   awsRegion: # defaults to provider region
    #   defaultAction: # ALLOW
    #   userPoolId: # required # user pool ID
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Users
        type: Query
        field: getUserInfo
        request: "getUserInfo-request-mapping-template.vtl"
        response: "getUserInfo-response-mapping-template.vtl"
      - dataSource: Tweets
        type: Query
        field: getTweet
        request: "getTweet-request-mapping-template.vtl"
        response: "getTweet-response-mapping-template.vtl"
      - dataSource: Lambda_MeInfo
        type: Query
        field: meInfo
        request: "meInfo-request-mapping-template.vtl"
        response: "meInfo-response-mapping-template.vtl"
      # - dataSource: ElasticSearch
      #   type: Query
      #   field: searchAllTweetsByKeyword
      #   request: "searchAllTweetsByKeyword-request-mapping-template.vtl"
      #   response: "searchAllTweetsByKeyword-response-mapping-template.vtl"
      - dataSource: Tweets
        type: User
        field: topTweet
        request: "topTweet-request-mapping-template.vtl"
        response: "topTweet-response-mapping-template.vtl"
      - dataSource: Tweets
        type: User
        field: tweets
        request: "tweets-request-mapping-template.vtl"
        response: "tweets-response-mapping-template.vtl"
      - dataSource: Tweets
        type: Mutation
        field: createTweet
        request: "createTweet-request-mapping-template.vtl"
        response: "createTweet-response-mapping-template.vtl"
      - dataSource: Tweets
        type: Mutation
        field: deleteTweet
        request: "deleteTweet-request-mapping-template.vtl"
        response: "deleteTweet-response-mapping-template.vtl"
      - dataSource: Tweets
        type: Mutation
        field: reTweet
        request: "reTweet-request-mapping-template.vtl"
        response: "reTweet-response-mapping-template.vtl"
      - dataSource: Tweets
        type: Mutation
        field: updateTweet
        request: "updateTweet-request-mapping-template.vtl"
        response: "updateTweet-response-mapping-template.vtl"
      - dataSource: Users
        type: Mutation
        field: updateUserInfo
        request: "updateUserInfo-request-mapping-template.vtl"
        response: "updateUserInfo-response-mapping-template.vtl"
    # schema: # defaults schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Users
        description: 'Users table'
        config:
          tableName: { Ref: UserTable }
          # serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: Tweets
        description: 'Tweets table'
        config:
          tableName: { Ref: TweetsTable }
          # serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      # - type: AMAZON_ELASTICSEARCH
      #   name: ElasticSearch
      #   description: 'ElasticSearch'
      #   config:
      #     endpoint: # required # "https://{DOMAIN}.{REGION}.es.amazonaws.com"
      #     serviceRoleArn: { Fn::GetAtt: [AppSyncESServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: Lambda_MeInfo
        description: 'Lambda DataSource'
        config: # Either of functionName or lambdaFunctionArn must tbe provided. When both are present, lambdaFunctionArn is used.
          functionName: graphql
          # lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } 
          # serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

resources:
  Resources:
    UserTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'Users'
    TweetsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          -
            AttributeName: tweet
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: tweet
            AttributeType: S
          -
            AttributeName: handle
            AttributeType: S
          -
            AttributeName: retweet_count
            AttributeType: N
          -
            AttributeName: created_at
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'Tweets'
        GlobalSecondaryIndexes:
          -
            IndexName: top-index
            KeySchema:
              -
                AttributeName: handle
                KeyType: HASH
              -
                AttributeName: retweet_count
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          -
            IndexName: tweet-index
            KeySchema:
              -
                AttributeName: handle
                KeyType: HASH
              -
                AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Dynamo-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Dynamo-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    # TODO replace with { "Ref" : "AWS::AccountNumber" }
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users"
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Users/*"
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Tweets"
                    - "arn:aws:dynamodb:${self:provider.region}:${self:custom.accountId}:table/Tweets/*"
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:appsync-example-dev-graphql"
                    - "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:appsync-example-dev-graphql:*"
    AppSyncESServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "ElasticSearch-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "ElasticSearch-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "es:*"
                  Resource:
                    - "arn:aws:es:us-east-1:${self:custom.accountId}:domain/appsync/*"
# appSync:
#   name: $(self:service)-$(self.provider.stage)-api
#   authenticationType: AWS_IAM
#   mappingTemplates: 
#     - dataSource: Notes
#       type: Mutation
#       field: createNote
#       request: "request/create-item-request-mapping-template.vtl"
#       response: "response/generic-response-mapping-template.vtl"